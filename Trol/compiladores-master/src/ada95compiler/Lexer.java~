/* The following code was generated by JFlex 1.6.1 */

package ada95compiler;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/ada95compiler/lexer_code.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\4\1\47\1\47\1\3\22\0\1\2\1\0\1\46\11\0"+
    "\1\44\1\6\1\42\1\41\1\45\11\1\1\36\1\43\1\40\1\37"+
    "\1\40\2\0\32\5\1\0\1\50\2\0\1\6\1\0\1\7\1\10"+
    "\1\16\1\15\1\20\1\26\1\22\1\27\1\21\1\5\1\35\1\25"+
    "\1\32\1\14\1\11\1\24\1\5\1\12\1\17\1\13\1\34\1\33"+
    "\1\30\1\23\1\31\1\5\12\0\1\47\u1fa2\0\1\47\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\24\3\1\1\2\5"+
    "\2\1\1\6\1\7\1\2\1\10\1\11\1\12\1\13"+
    "\1\0\3\14\1\15\5\14\1\16\1\14\1\17\11\14"+
    "\1\20\11\14\1\21\1\22\1\23\15\14\1\24\1\25"+
    "\1\0\1\26\1\27\1\30\1\31\1\32\1\14\1\33"+
    "\1\14\1\34\1\14\1\35\3\14\1\36\5\14\1\37"+
    "\5\14\1\40\1\41\11\14\1\42\6\14\1\43\5\14"+
    "\1\44\4\14\1\45\1\46\3\14\1\47\10\14\1\50"+
    "\1\14\1\51\1\52\4\14\1\53\6\14\1\54\1\55"+
    "\1\14\1\56\4\14\1\57\2\14\1\60\1\61\1\14"+
    "\1\62\1\63\2\14\1\64\1\14\1\65\1\66\6\14"+
    "\1\67\1\70\5\14\1\71\10\14\1\72\1\73\1\74"+
    "\1\75\1\76\1\14\1\77\3\14\1\100\2\14\1\101"+
    "\11\14\1\102\1\103\1\14\1\104\2\14\1\105\1\14"+
    "\1\106\1\107\1\110\1\14\1\111\1\112\2\14\1\113"+
    "\1\114\2\14\1\115\1\116\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\122\0\244\0\122\0\315"+
    "\0\366\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\u0401\0\122\0\u042a\0\u042a\0\u0453"+
    "\0\122\0\122\0\u047c\0\122\0\u04a5\0\122\0\u04ce\0\u04f7"+
    "\0\315\0\u0520\0\u0549\0\315\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\315\0\u063f\0\315\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\315\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\315\0\315\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40"+
    "\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\122"+
    "\0\122\0\u047c\0\122\0\122\0\122\0\122\0\u04f7\0\u0b88"+
    "\0\315\0\u0bb1\0\315\0\u0bda\0\315\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\315\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\315\0\u0d4b"+
    "\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\315\0\315\0\u0e18\0\u0e41"+
    "\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\315"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\315\0\u107f"+
    "\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\315\0\u114c\0\u1175\0\u119e"+
    "\0\u11c7\0\315\0\315\0\u11f0\0\u1219\0\u1242\0\315\0\u126b"+
    "\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a\0\315"+
    "\0\u13b3\0\315\0\315\0\u13dc\0\u1405\0\u142e\0\u1457\0\315"+
    "\0\u1480\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\315\0\315"+
    "\0\u1576\0\315\0\u159f\0\u15c8\0\u15f1\0\u161a\0\315\0\u1643"+
    "\0\u166c\0\315\0\315\0\u1695\0\315\0\315\0\u16be\0\u16e7"+
    "\0\315\0\u1710\0\315\0\315\0\u1739\0\u1762\0\u178b\0\u17b4"+
    "\0\u17dd\0\u1806\0\315\0\315\0\u182f\0\u1858\0\u1881\0\u18aa"+
    "\0\u18d3\0\315\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9"+
    "\0\u19f2\0\u1a1b\0\315\0\315\0\315\0\315\0\315\0\u1a44"+
    "\0\315\0\u1a6d\0\u1a96\0\u1abf\0\315\0\u1ae8\0\u1b11\0\315"+
    "\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u1c59"+
    "\0\u1c82\0\315\0\315\0\u1cab\0\315\0\u1cd4\0\u1cfd\0\315"+
    "\0\u1d26\0\315\0\315\0\315\0\u1d4f\0\315\0\315\0\u1d78"+
    "\0\u1da1\0\315\0\315\0\u1dca\0\u1df3\0\315\0\315\0\315"+
    "\0\315";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\10"+
    "\1\31\1\10\1\32\1\10\1\33\1\10\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\0"+
    "\1\3\3\45\2\0\41\45\1\46\1\45\1\47\52\0"+
    "\1\4\40\0\1\50\2\0\1\4\7\0\1\7\45\0"+
    "\1\51\3\0\31\51\7\0\1\51\4\0\1\51\3\0"+
    "\3\51\1\52\1\51\1\53\1\54\1\55\1\51\1\56"+
    "\6\51\1\57\10\51\7\0\1\51\4\0\1\51\3\0"+
    "\4\51\1\60\6\51\1\61\15\51\7\0\1\51\4\0"+
    "\1\51\3\0\5\51\1\62\1\63\12\51\1\64\5\51"+
    "\1\65\1\51\7\0\1\51\4\0\1\51\3\0\2\51"+
    "\1\66\10\51\1\67\15\51\7\0\1\51\4\0\1\51"+
    "\3\0\2\51\1\70\10\51\1\71\6\51\1\72\1\51"+
    "\1\73\4\51\7\0\1\51\4\0\1\51\3\0\4\51"+
    "\1\65\6\51\1\74\13\51\1\75\1\51\7\0\1\51"+
    "\4\0\1\51\3\0\4\51\1\76\6\51\1\77\1\100"+
    "\14\51\7\0\1\51\4\0\1\51\3\0\2\51\1\101"+
    "\1\51\1\102\24\51\7\0\1\51\4\0\1\51\3\0"+
    "\13\51\1\103\13\51\1\104\1\51\7\0\1\51\4\0"+
    "\1\51\3\0\7\51\1\105\6\51\1\106\1\51\1\107"+
    "\10\51\7\0\1\51\4\0\1\51\3\0\7\51\1\110"+
    "\2\51\1\111\6\51\1\112\7\51\7\0\1\51\4\0"+
    "\1\51\3\0\4\51\1\113\6\51\1\114\15\51\7\0"+
    "\1\51\4\0\1\51\3\0\4\51\1\115\24\51\7\0"+
    "\1\51\4\0\1\51\3\0\2\51\1\116\2\51\1\117"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\4\51\1\120"+
    "\7\51\1\121\14\51\7\0\1\51\4\0\1\51\3\0"+
    "\4\51\1\122\22\51\1\123\1\51\7\0\1\51\4\0"+
    "\1\51\3\0\14\51\1\124\5\51\1\125\6\51\7\0"+
    "\1\51\4\0\1\51\3\0\4\51\1\126\24\51\7\0"+
    "\1\51\4\0\1\51\3\0\12\51\1\127\16\51\7\0"+
    "\1\51\42\0\1\130\50\0\1\35\53\0\1\131\7\0"+
    "\1\132\40\0\1\50\2\0\1\132\3\0\3\45\2\0"+
    "\41\45\1\0\1\45\13\0\1\133\1\134\1\135\31\0"+
    "\1\136\3\0\1\137\43\0\1\137\4\0\1\51\3\0"+
    "\4\51\1\140\5\51\1\141\16\51\7\0\1\51\4\0"+
    "\1\51\3\0\5\51\1\142\23\51\7\0\1\51\4\0"+
    "\1\51\3\0\10\51\1\143\20\51\7\0\1\51\4\0"+
    "\1\51\3\0\11\51\1\144\17\51\7\0\1\51\4\0"+
    "\1\51\3\0\20\51\1\145\10\51\7\0\1\51\4\0"+
    "\1\51\3\0\10\51\1\146\20\51\7\0\1\51\4\0"+
    "\1\51\3\0\15\51\1\147\13\51\7\0\1\51\4\0"+
    "\1\51\3\0\22\51\1\150\6\51\7\0\1\51\4\0"+
    "\1\51\3\0\6\51\1\151\22\51\7\0\1\51\4\0"+
    "\1\51\3\0\7\51\1\152\4\51\1\153\14\51\7\0"+
    "\1\51\4\0\1\51\3\0\6\51\1\154\1\155\1\51"+
    "\1\156\13\51\1\157\1\160\2\51\7\0\1\51\4\0"+
    "\1\51\3\0\12\51\1\161\16\51\7\0\1\51\4\0"+
    "\1\51\3\0\5\51\1\162\23\51\7\0\1\51\4\0"+
    "\1\51\3\0\13\51\1\163\15\51\7\0\1\51\4\0"+
    "\1\51\3\0\17\51\1\164\11\51\7\0\1\51\4\0"+
    "\1\51\3\0\23\51\1\165\5\51\7\0\1\51\4\0"+
    "\1\51\3\0\20\51\1\166\10\51\7\0\1\51\4\0"+
    "\1\51\3\0\11\51\1\167\6\51\1\170\10\51\7\0"+
    "\1\51\4\0\1\51\3\0\15\51\1\171\13\51\7\0"+
    "\1\51\4\0\1\51\3\0\12\51\1\172\16\51\7\0"+
    "\1\51\4\0\1\51\3\0\7\51\1\173\21\51\7\0"+
    "\1\51\4\0\1\51\3\0\17\51\1\174\1\175\10\51"+
    "\7\0\1\51\4\0\1\51\3\0\3\51\1\176\25\51"+
    "\7\0\1\51\4\0\1\51\3\0\6\51\1\177\1\51"+
    "\1\200\20\51\7\0\1\51\4\0\1\51\3\0\11\51"+
    "\1\201\2\51\1\202\14\51\7\0\1\51\4\0\1\51"+
    "\3\0\12\51\1\203\16\51\7\0\1\51\4\0\1\51"+
    "\3\0\6\51\1\204\22\51\7\0\1\51\4\0\1\51"+
    "\3\0\6\51\1\205\22\51\7\0\1\51\4\0\1\51"+
    "\3\0\7\51\1\206\21\51\7\0\1\51\4\0\1\51"+
    "\3\0\5\51\1\207\23\51\7\0\1\51\4\0\1\51"+
    "\3\0\11\51\1\210\17\51\7\0\1\51\4\0\1\51"+
    "\3\0\4\51\1\211\7\51\1\212\14\51\7\0\1\51"+
    "\4\0\1\51\3\0\4\51\1\213\24\51\7\0\1\51"+
    "\4\0\1\51\3\0\25\51\1\214\3\51\7\0\1\51"+
    "\4\0\1\51\3\0\5\51\1\215\23\51\7\0\1\51"+
    "\4\0\1\51\3\0\7\51\1\216\21\51\7\0\1\51"+
    "\4\0\1\51\3\0\6\51\1\217\22\51\7\0\1\51"+
    "\4\0\1\51\3\0\13\51\1\220\1\221\14\51\7\0"+
    "\1\51\4\0\1\51\3\0\10\51\1\222\20\51\7\0"+
    "\1\51\4\0\1\51\3\0\13\51\1\223\15\51\7\0"+
    "\1\51\4\0\1\51\3\0\5\51\1\224\23\51\7\0"+
    "\1\51\4\0\1\51\3\0\2\51\1\225\26\51\7\0"+
    "\1\51\4\0\1\51\3\0\13\51\1\226\15\51\7\0"+
    "\1\51\4\0\1\51\3\0\24\51\1\227\4\51\7\0"+
    "\1\51\4\0\1\51\3\0\14\51\1\230\14\51\7\0"+
    "\1\51\4\0\1\51\3\0\13\51\1\231\15\51\7\0"+
    "\1\51\4\0\1\51\3\0\15\51\1\232\13\51\7\0"+
    "\1\51\4\0\1\51\3\0\12\51\1\233\16\51\7\0"+
    "\1\51\4\0\1\51\3\0\27\51\1\234\1\51\7\0"+
    "\1\51\4\0\1\51\3\0\2\51\1\235\26\51\7\0"+
    "\1\51\4\0\1\51\3\0\4\51\1\236\24\51\7\0"+
    "\1\51\4\0\1\51\3\0\13\51\1\237\15\51\7\0"+
    "\1\51\4\0\1\51\3\0\30\51\1\240\7\0\1\51"+
    "\4\0\1\51\3\0\25\51\1\241\3\51\7\0\1\51"+
    "\4\0\1\51\3\0\7\51\1\242\21\51\7\0\1\51"+
    "\4\0\1\51\3\0\13\51\1\243\15\51\7\0\1\51"+
    "\4\0\1\51\3\0\20\51\1\244\10\51\7\0\1\51"+
    "\4\0\1\51\3\0\2\51\1\245\3\51\1\246\22\51"+
    "\7\0\1\51\4\0\1\51\3\0\14\51\1\247\14\51"+
    "\7\0\1\51\4\0\1\51\3\0\13\51\1\250\15\51"+
    "\7\0\1\51\4\0\1\51\3\0\12\51\1\251\16\51"+
    "\7\0\1\51\4\0\1\51\3\0\2\51\1\252\26\51"+
    "\7\0\1\51\4\0\1\51\3\0\13\51\1\253\15\51"+
    "\7\0\1\51\4\0\1\51\3\0\6\51\1\254\22\51"+
    "\7\0\1\51\4\0\1\51\3\0\5\51\1\255\23\51"+
    "\7\0\1\51\4\0\1\51\3\0\13\51\1\256\15\51"+
    "\7\0\1\51\4\0\1\51\3\0\6\51\1\257\22\51"+
    "\7\0\1\51\4\0\1\51\3\0\13\51\1\260\15\51"+
    "\7\0\1\51\4\0\1\51\3\0\13\51\1\261\15\51"+
    "\7\0\1\51\4\0\1\51\3\0\4\51\1\262\24\51"+
    "\7\0\1\51\4\0\1\51\3\0\13\51\1\263\15\51"+
    "\7\0\1\51\4\0\1\51\3\0\30\51\1\264\7\0"+
    "\1\51\4\0\1\51\3\0\11\51\1\265\17\51\7\0"+
    "\1\51\4\0\1\51\3\0\26\51\1\266\2\51\7\0"+
    "\1\51\4\0\1\51\3\0\17\51\1\267\11\51\7\0"+
    "\1\51\4\0\1\51\3\0\14\51\1\270\14\51\7\0"+
    "\1\51\4\0\1\51\3\0\11\51\1\271\17\51\7\0"+
    "\1\51\4\0\1\51\3\0\22\51\1\272\6\51\7\0"+
    "\1\51\4\0\1\51\3\0\7\51\1\273\21\51\7\0"+
    "\1\51\4\0\1\51\3\0\20\51\1\274\10\51\7\0"+
    "\1\51\4\0\1\51\3\0\6\51\1\275\22\51\7\0"+
    "\1\51\4\0\1\51\3\0\24\51\1\276\4\51\7\0"+
    "\1\51\4\0\1\51\3\0\12\51\1\277\4\51\1\300"+
    "\11\51\7\0\1\51\4\0\1\51\3\0\7\51\1\301"+
    "\21\51\7\0\1\51\4\0\1\51\3\0\5\51\1\302"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\13\51\1\303"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\13\51\1\304"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\5\51\1\305"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\25\51\1\306"+
    "\3\51\7\0\1\51\4\0\1\51\3\0\5\51\1\307"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\5\51\1\310"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\14\51\1\311"+
    "\14\51\7\0\1\51\4\0\1\51\3\0\2\51\1\312"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\24\51\1\313"+
    "\4\51\7\0\1\51\4\0\1\51\3\0\2\51\1\314"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\6\51\1\315"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\6\51\1\316"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\5\51\1\317"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\11\51\1\320"+
    "\17\51\7\0\1\51\4\0\1\51\3\0\24\51\1\321"+
    "\4\51\7\0\1\51\4\0\1\51\3\0\24\51\1\322"+
    "\4\51\7\0\1\51\4\0\1\51\3\0\17\51\1\323"+
    "\11\51\7\0\1\51\4\0\1\51\3\0\15\51\1\324"+
    "\13\51\7\0\1\51\4\0\1\51\3\0\5\51\1\325"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\2\51\1\326"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\13\51\1\327"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\2\51\1\330"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\6\51\1\331"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\6\51\1\332"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\13\51\1\333"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\12\51\1\334"+
    "\16\51\7\0\1\51\4\0\1\51\3\0\6\51\1\335"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\12\51\1\336"+
    "\16\51\7\0\1\51\4\0\1\51\3\0\7\51\1\337"+
    "\21\51\7\0\1\51\4\0\1\51\3\0\13\51\1\340"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\10\51\1\341"+
    "\20\51\7\0\1\51\4\0\1\51\3\0\12\51\1\342"+
    "\16\51\7\0\1\51\4\0\1\51\3\0\7\51\1\343"+
    "\21\51\7\0\1\51\4\0\1\51\3\0\5\51\1\344"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\12\51\1\345"+
    "\16\51\7\0\1\51\4\0\1\51\3\0\2\51\1\346"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\2\51\1\347"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\6\51\1\350"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\17\51\1\351"+
    "\11\51\7\0\1\51\4\0\1\51\3\0\6\51\1\352"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\13\51\1\353"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\14\51\1\354"+
    "\14\51\7\0\1\51\4\0\1\51\3\0\15\51\1\355"+
    "\13\51\7\0\1\51\4\0\1\51\3\0\10\51\1\356"+
    "\20\51\7\0\1\51\4\0\1\51\3\0\6\51\1\357"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\13\51\1\360"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\14\51\1\361"+
    "\14\51\7\0\1\51\4\0\1\51\3\0\12\51\1\362"+
    "\16\51\7\0\1\51\4\0\1\51\3\0\13\51\1\363"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\2\51\1\364"+
    "\26\51\7\0\1\51\4\0\1\51\3\0\13\51\1\365"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\7\51\1\366"+
    "\21\51\7\0\1\51\4\0\1\51\3\0\6\51\1\367"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\13\51\1\370"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\14\51\1\371"+
    "\14\51\7\0\1\51\4\0\1\51\3\0\5\51\1\372"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\11\51\1\373"+
    "\17\51\7\0\1\51\4\0\1\51\3\0\13\51\1\374"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\27\51\1\375"+
    "\1\51\7\0\1\51\4\0\1\51\3\0\13\51\1\376"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\10\51\1\377"+
    "\20\51\7\0\1\51\4\0\1\51\3\0\4\51\1\u0100"+
    "\24\51\7\0\1\51\4\0\1\51\3\0\6\51\1\u0101"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\6\51\1\u0102"+
    "\22\51\7\0\1\51\4\0\1\51\3\0\13\51\1\u0103"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\4\51\1\u0104"+
    "\24\51\7\0\1\51\4\0\1\51\3\0\5\51\1\u0105"+
    "\23\51\7\0\1\51\4\0\1\51\3\0\7\51\1\u0106"+
    "\21\51\7\0\1\51\4\0\1\51\3\0\13\51\1\u0107"+
    "\15\51\7\0\1\51\4\0\1\51\3\0\7\51\1\u0108"+
    "\21\51\7\0\1\51\4\0\1\51\3\0\13\51\1\u0109"+
    "\15\51\7\0\1\51\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7708];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\25\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\57\1\2\11\1\0\4\11\253\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 81: break;
          case 2: 
            { System.out.print("<num:"+yytext()+">");
            }
          case 82: break;
          case 3: 
            { 
            }
          case 83: break;
          case 4: 
            { System.out.println();
            }
          case 84: break;
          case 5: 
            { System.out.print("<oprel:"+yytext()+">");
            }
          case 85: break;
          case 6: 
            { System.out.print("<endOfSentence>");
            }
          case 86: break;
          case 7: 
            { System.out.print("<separator>");
            }
          case 87: break;
          case 8: 
            { string.setLength(0); yybegin(STRING);
            }
          case 88: break;
          case 9: 
            { string.append( yytext() );
            }
          case 89: break;
          case 10: 
            { yybegin(YYINITIAL); 
                                       System.out.print("<string:"+string.toString()+">");
            }
          case 90: break;
          case 11: 
            { string.append('\\');
            }
          case 91: break;
          case 12: 
            { System.out.print("<id:"+yytext()+">");
            }
          case 92: break;
          case 13: 
            { System.out.print("<at>");
            }
          case 93: break;
          case 14: 
            { System.out.print("<or>");
            }
          case 94: break;
          case 15: 
            { System.out.print("<of>");
            }
          case 95: break;
          case 16: 
            { System.out.print("<do>");
            }
          case 96: break;
          case 17: 
            { System.out.print("<in>");
            }
          case 97: break;
          case 18: 
            { System.out.print("<is>");
            }
          case 98: break;
          case 19: 
            { System.out.print("<if>");
            }
          case 99: break;
          case 20: 
            { System.out.print("<asign:"+yytext()+">");
            }
          case 100: break;
          case 21: 
            { System.out.print("<ellipsis>");
            }
          case 101: break;
          case 22: 
            { string.append('\r');
            }
          case 102: break;
          case 23: 
            { string.append('\t');
            }
          case 103: break;
          case 24: 
            { string.append('\n');
            }
          case 104: break;
          case 25: 
            { string.append('\"');
            }
          case 105: break;
          case 26: 
            { System.out.print("<real:"+yytext()+">");
            }
          case 106: break;
          case 27: 
            { System.out.print("<abs>");
            }
          case 107: break;
          case 28: 
            { System.out.print("<and>");
            }
          case 108: break;
          case 29: 
            { System.out.print("<all>");
            }
          case 109: break;
          case 30: 
            { System.out.print("<not>");
            }
          case 110: break;
          case 31: 
            { System.out.print("<rem>");
            }
          case 111: break;
          case 32: 
            { System.out.print("<new>");
            }
          case 112: break;
          case 33: 
            { System.out.print("<nul>");
            }
          case 113: break;
          case 34: 
            { System.out.print("<end>");
            }
          case 114: break;
          case 35: 
            { System.out.print("<xor>");
            }
          case 115: break;
          case 36: 
            { System.out.print("<for>");
            }
          case 116: break;
          case 37: 
            { System.out.print("<mod>");
            }
          case 117: break;
          case 38: 
            { System.out.print("<use>");
            }
          case 118: break;
          case 39: 
            { System.out.print("<body>");
            }
          case 119: break;
          case 40: 
            { System.out.print("<task>");
            }
          case 120: break;
          case 41: 
            { System.out.print("<then>");
            }
          case 121: break;
          case 42: 
            { System.out.print("<type>");
            }
          case 122: break;
          case 43: 
            { System.out.print("<case>");
            }
          case 123: break;
          case 44: 
            { System.out.print("<exit>");
            }
          case 124: break;
          case 45: 
            { System.out.print("<else>");
            }
          case 125: break;
          case 46: 
            { System.out.print("<goto>");
            }
          case 126: break;
          case 47: 
            { System.out.print("<loop>");
            }
          case 127: break;
          case 48: 
            { System.out.print("<with>");
            }
          case 128: break;
          case 49: 
            { System.out.print("<when>");
            }
          case 129: break;
          case 50: 
            { System.out.print("<abort>");
            }
          case 130: break;
          case 51: 
            { System.out.print("<array>");
            }
          case 131: break;
          case 52: 
            { System.out.print("<begin>");
            }
          case 132: break;
          case 53: 
            { System.out.print("<range>");
            }
          case 133: break;
          case 54: 
            { System.out.print("<raise>");
            }
          case 134: break;
          case 55: 
            { System.out.print("<delay>");
            }
          case 135: break;
          case 56: 
            { System.out.print("<delta>");
            }
          case 136: break;
          case 57: 
            { System.out.print("<entry>");
            }
          case 137: break;
          case 58: 
            { System.out.print("<while>");
            }
          case 138: break;
          case 59: 
            { System.out.print("<access>");
            }
          case 139: break;
          case 60: 
            { System.out.print("<accept>");
            }
          case 140: break;
          case 61: 
            { System.out.print("<others>");
            }
          case 141: break;
          case 62: 
            { System.out.print("<return>");
            }
          case 142: break;
          case 63: 
            { System.out.print("<record>");
            }
          case 143: break;
          case 64: 
            { System.out.print("<digits>");
            }
          case 144: break;
          case 65: 
            { System.out.print("<select>");
            }
          case 145: break;
          case 66: 
            { System.out.print("<renames>");
            }
          case 146: break;
          case 67: 
            { System.out.print("<reverse>");
            }
          case 147: break;
          case 68: 
            { System.out.print("<declare>");
            }
          case 148: break;
          case 69: 
            { System.out.print("<subtype>");
            }
          case 149: break;
          case 70: 
            { System.out.print("<integer>");
            }
          case 150: break;
          case 71: 
            { System.out.print("<generic>");
            }
          case 151: break;
          case 72: 
            { System.out.print("<package>");
            }
          case 152: break;
          case 73: 
            { System.out.print("<private>");
            }
          case 153: break;
          case 74: 
            { System.out.print("<limited>");
            }
          case 154: break;
          case 75: 
            { System.out.print("<constant>");
            }
          case 155: break;
          case 76: 
            { System.out.print("<separate>");
            }
          case 156: break;
          case 77: 
            { System.out.print("<function>");
            }
          case 157: break;
          case 78: 
            { System.out.print("<terminate>");
            }
          case 158: break;
          case 79: 
            { System.out.print("<exception>");
            }
          case 159: break;
          case 80: 
            { System.out.print("<procedure>");
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
